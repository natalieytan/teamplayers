<div class="rounded">
 <%= image_tag @profile.image_url(:square) %>
</div>

<%= form_with(model: profile, local: true) do |form| %>

  
  <% if profile.errors.any? %>
    <div id="error_explanation">
      <h4><%= pluralize(profile.errors.count, "error") %> prohibited this profile from being saved:</h4>

      <ul>  
      <% profile.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

    <div class="field filebox">
    <div class="uploader">
      <%= form.hidden_field :image, value: profile.cached_image_data %>
      <%= form.file_field :image, accept: 'image/jpeg,image/jpg,image/gif,image/png', id: :profile_image, class: "inputfile" %>
      <label for="profile_image"><%= fa_icon "upload" %> Upload Profile Picture</label>
      </div>
        <div class="file-info"></div>
  </div>

  <div class="field">
    <%= form.label :first_name, class:"required" %>
    <%= form.text_field :first_name, id: :profile_first_name , required: true %>
  </div>

  <div class="field">
    <%= form.label :last_name, class:"required" %>
    <%= form.text_field :last_name, id: :profile_last_name, required: true  %>
  </div>

    <div class="field">
    <%= form.label :last_name, "About yourself" %>
    <%= form.text_area :description, id: :profile_description %>
  </div>

  <div class="field">
    <%= form.label :birth_date, class:"required"  %><br>
    <%= form.date_select :birth_date, id: :profile_birth_date, :prompt => {
:day => 'Select day', :month => 'Select month', :year => 'Select year'
}, :start_year => Time.now.year, :end_year => Time.now.year - 80, class: "styled-select", required: true  %>
  </div>

  <div class="field">
    <%= form.label :gender, class:"required"  %><br>
    <%= form.select :gender, Profile.genders.keys.map { |w| [w.humanize, w]}, :include_blank => true, class: "styled-select" %>
  </div>

    <div id="locationField">
      <label for="autocomplete" class="required" >Preferred playing location</label>
      <input id="autocomplete" 
             onFocus="geolocate()" type="text"></input>
    </div>

  <div class="address">
  <div class="row">
    <div class="field">
    <%= form.label :city %>
    <%= form.text_field :city, id: "locality" %>
  </div>

    <div class="field">
    <%= form.label :postcode %>
    <%= form.text_field :postcode, id: "postal_code" %>
  </div>

    <div class="field">
    <%= form.label :state %>
    <%= form.text_field :state,  id: "administrative_area_level_1" %>
    </div>
    <div class="field">
      <%= form.label :country %>
      <%= form.text_field :country, id: "country" %>
    </div>
  </div>
</div>

  <div class="actions">
    <%= form.submit %>
  </div>
<% end %>

<script type="text/javascript">
  $('#profile_image').bind('change', function() {
    var size_in_megabytes = this.files[0].size/1024/1024;
    var input = document.querySelector( '.inputfile' );
    var fileinfo = document.querySelector( '.file-info' );
    var label	 = input.nextElementSibling;
    var labelVal = label.innerHTML;
    var fileName = '';
    if (size_in_megabytes > 1) {
      alert('Maximum file size is 1MB. Please choose a smaller file.');
      fileinfo.innerHTML = fileName;
    }
    else {
    fileName = this.value.split( '\\' ).pop();
    if( fileName )
      fileinfo.innerHTML = fileName;
    }
  });

</script>



    <script>
      // This example displays an address form, using the autocomplete feature
      // of the Google Places API to help users fill in the information.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

      var placeSearch, autocomplete;
      var componentForm = {
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
      };

      function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
            {types: ['geocode']});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
      }

      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
          document.getElementById(component).value = '';
          // document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
          var addressType = place.address_components[i].types[0];
          if (componentForm[addressType]) {
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;
          }
        }
      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB4JYfecnp9SrqFt5SU5z6g4TBJ5X3MUvs&libraries=places&callback=initAutocomplete"
        async defer></script> 